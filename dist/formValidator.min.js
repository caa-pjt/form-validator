class FormValidator{#t=!1;inputs=[];options={form:[],local:"en"};constructor(t={}){this.options=Object.assign({},this.options,t),this.#e()}#e(){if(0===this.options.form.length||null!=this.options.form.target){const t=Object.fromEntries(new FormData(this.options.form.target).entries());if(this.data=t,0===this.options.form.currentTarget.length)console.error("No FormData imputs detected !? \n                                Please send the form with imputs on the objet options.form");else{for(let t=0;t<this.options.form.currentTarget.length;t++)this.inputs.push(this.options.form.currentTarget[t]);this.#i()}}else console.error("The objet options.form is empty or undefined. Please insert values in the objetc.")}#i(){const t=this.options.validationRules;for(const e in t)if(void 0===this.data[e])console.error(`l'imput name: [${e}] n'existe pas`);else{const i=t[e].split("|");this.#r(e,i)}}#r(t,e){for(let i=0;i<e.length;i++){let r=e[i].split(":");if(r.length>1){const e=r[0],i=r[1];this[e](t,i)}else this[r](t);this.#t&&console.log(t)}}#s(t){return this.inputs.find((e=>e.getAttribute("name")==t))}getErrors(){return this.errors}isValide(){return null==this.errors&&null==this.errors}getData(){return this.data}setErrors(){for(const t in this.data){this.#t&&console.log(t);const e=this.#s(t);void 0===this.errors||void 0===this.errors[t]?this.#n(e):Object.values(this.errors[t]).length>0&&this.#o(e,Object.values(this.errors[t])[0])}}#o(t,e){if(t.classList.contains("is-invalid"))return"SPAN"===t.nextElementSibling.tagName&&t.nextElementSibling.innerText!==e&&(t.nextElementSibling.innerText=e),!1;if(t.classList.contains("was-validated")&&t.classList.remove("was-validated"),!t.classList.contains("is-invalid")&&t.classList.add("is-invalid"),null===t.nextElementSibling){const i=this.#a(t,e);t.parentElement.appendChild(i)}else if("SPAN"!=t.nextElementSibling.tagName){const i=this.#a(t,e);t.nextSibling.before(i)}if(t.nextElementSibling.dataset.inputName===t.getAttribute("name")){const i=t.nextElementSibling;i.innerText="",i.innerText=e}this.#t&&console.log(`Add error from inputName : ${t.getAttribute("name")}`)}#a(t,e){const i=document.createElement("span");return i.dataset.inputName=t.getAttribute("name"),i.classList.add("help-block"),i.innerText=e,i}#n(t){if(t.classList.contains("was-validated"))return!1;t.classList.contains("is-invalid")&&t.classList.remove("is-invalid"),!t.classList.contains("was-validated")&&t.classList.add("was-validated"),"SPAN"==t.nextElementSibling.tagName&&t.nextElementSibling.remove()}required(t){if(""===this.data[t]||void 0===this.data[t]){"select"===this.#s(t).tagName.toLowerCase()?this.#l(t,"required",this.textError("select",{name:t})):this.#l(t,"required",this.textError("empty",{}))}}email(t){if(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.data[t])){const e=this.#s(t);this.#n(e)}else this.#l(t,"email",this.textError("email",{}))}min(t,e){if(parseInt(e))if(this.data[t].trim().length<e)this.#l(t,"min",this.textError("min",{min:e}));else{const e=this.#s(t);this.#n(e)}else console.error("The parameter min is not a number")}max(t,e){if(parseInt(e))if(this.data[t].trim().length>e)this.#l(t,"max",this.textError("max",{max:e}));else{const e=this.#s(t);this.#n(e)}else console.error("The parameter max is not a number")}match(t,e){this.data[t].match(e.slice(1,-1));if(this.data[t].match(e.slice(1,-1))){const e=this.#s(t);this.#n(e)}else this.#l(t,"match",this.textError("match",{}))}#l(t,e,i){this.#t&&console.log(`addError - name : ${t} | error : ${i}`),void 0===this.errors&&(this.errors=new Object),void 0===this.errors[t]&&(this.errors[t]=new Object),this.errors[t][e]=i}textError(t,e){this.#t&&console.log(e);const i={fr:{undefined:"Entrée invalide",empty:"Ce champ ne peux pas être vide",email:"Le champ email n'est pas un email valide",min:`LE champ doit contenir au minimum ${e.min} caractères`,max:`Le champ ne peut pas contenir plus de ${e.max} caractères`,select:`Veuillez sélectionner un ${e.name}`,match:"La valeur indiquée n'est pas valide"},en:{undefined:"Field invalid",empty:"This field cannot be empty, please enter a message",email:"The email is not valid",min:`This field must contain at least ${e.min} characters`,max:`The field cannot contain more than ${e.max} characters`,select:`Please select a valid ${e.name}`,match:"The value is not valid"}},r=this.options.local.toLowerCase();return void 0===i[r]&&(this.options.local="en"),void 0===i[r][t]?(console.error(`No locales.${this.options.local} text found for the error name : ${t}`),i[r][void 0]):i[r][t]}}